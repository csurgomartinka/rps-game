const express = require('express');
const http = require('http');
const { Server } = require('socket.io');
const mysql = require('mysql2/promise');
const bcrypt = require('bcrypt');
const bodyParser = require('body-parser');
const path = require('path');
const nodemailer = require('nodemailer');
const { Pool } = require('pg');
require('dotenv').config();

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: ["https://your-app.onrender.com", "http://localhost:3000"],
    methods: ["GET", "POST"]
  }
});
// Hiteles√≠t√©si middleware
const authenticate = async (req, res, next) => {
  const token = req.headers.authorization;
  
  if (!token) {
    return res.status(401).json({ success: false, message: 'Hozz√°f√©r√©s megtagadva. Nincs token.' });
  }
  
  try {
    // Itt ellen≈ërizn√©d a token √©rv√©nyess√©g√©t
    // Most egyszer≈±s√≠tett v√°ltozat, ahol csak ellen≈ërizz√ºk, hogy van-e user a localStorage-ban
    next();
  } catch (error) {
    console.error('Hiba a token ellen≈ërz√©se sor√°n:', error);
    res.status(401).json({ success: false, message: '√ârv√©nytelen token.' });
  }
};

// P√©lda egy v√©dett route-ra
app.get('/api/protected', authenticate, (req, res) => {
  res.json({ success: true, message: 'V√©dett tartalom' });
});

// Ellen≈ërizd a socket kapcsolatot
io.on('connection', (socket) => {
  console.log('‚úÖ √öj kapcsolat:', socket.id);
  
  socket.on('joinGame', (roomId) => {
    console.log(`üè† ${socket.id} csatlakozott a ${roomId} szob√°hoz`);
  });
});

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
  ssl: { rejectUnauthorized: false }
});

// Middleware-ek
// Statikus f√°jlok kezel√©se
app.use(express.static('public', {
  setHeaders: (res, path) => {
    if (path.endsWith('.html')) {
      res.setHeader('Cache-Control', 'no-cache, no-store, must-revalidate');
    }
  }
}));
app.use(bodyParser.json());

// Biztons√°gi fejl√©cek
app.use((req, res, next) => {
  res.setHeader('X-Frame-Options', 'DENY');
  res.setHeader('X-XSS-Protection', '1; mode=block');
  res.setHeader('X-Content-Type-Options', 'nosniff');
  res.setHeader('Referrer-Policy', 'no-referrer');
  next();
});


// Email k√ºld≈ë konfigur√°ci√≥
const transporter = nodemailer.createTransport({
  service: 'gmail',
  auth: {
    user: process.env.EMAIL_USER,
    pass: process.env.EMAIL_PASS
  }
});

// J√°t√©k szob√°k kezel√©se
const rooms = {};

// Kezd≈ëoldal - √°tir√°ny√≠t√°s a megfelel≈ë oldalra
app.get('/', async (req, res) => {
  try {
    res.sendFile(path.join(__dirname, 'public', 'register.html'));
  } catch (error) {
    console.error('Hiba a kezd≈ëoldal bet√∂lt√©sekor:', error);
    res.status(500).send('Hiba t√∂rt√©nt a kezd≈ëoldal bet√∂lt√©sekor.');
  }
});


// V√©dett route-ok (csak bejelentkezett felhaszn√°l√≥knak)
app.get('/game', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

app.get('/menu', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'menu.html'));
});

// Regisztr√°ci√≥
app.post('/api/register', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // M√≥dos√≠tott SQL lek√©rdez√©s - PostgreSQL kompatibilis szintaxis
    const existingUsers = await pool.query(
      'SELECT * FROM felhasznalok WHERE email = $1', 
      [email]
    );
    
    if (existingUsers.rows.length > 0) {
      return res.status(400).json({ success: false, message: 'Ez az email c√≠m m√°r regisztr√°lva van.' });
    }
    
    // Jelsz√≥ hashel√©se
    const hashedPassword = await bcrypt.hash(password, 10);
    const verificationCode = Math.floor(100000 + Math.random() * 900000).toString();
    
    // Felhaszn√°l√≥ ment√©se az adatb√°zisba
    await pool.query(
      'INSERT INTO felhasznalok (email, jelszo, kod, aktivalt) VALUES ($1, $2, $3, $4)',
      [email, hashedPassword, verificationCode, false]
    );
    
    // Email k√ºld√©se
    const mailOptions = {
      from: process.env.EMAIL_USER,
      to: email,
      subject: 'Regisztr√°ci√≥ meger≈ës√≠t√©se - K≈ë-Pap√≠r-Oll√≥ J√°t√©k',
      text: `K√∂sz√∂nj√ºk a regisztr√°ci√≥t!\n\nAz aktiv√°l√≥ k√≥dod: ${verificationCode}\n\nA k√≥dot a verify.html oldalon tudod megadni.`
    };
    
    await transporter.sendMail(mailOptions);
    
    res.json({ 
      success: true, 
      message: 'Regisztr√°ci√≥ sikeres! K√©rlek er≈ës√≠tsd meg az email c√≠med az elk√ºld√∂tt k√≥ddal.' 
    });
  } catch (error) {
    console.error('Hiba a regisztr√°ci√≥ sor√°n:', error);
    res.status(500).json({ success: false, message: 'Hiba t√∂rt√©nt a regisztr√°ci√≥ sor√°n.' });
  }
});

// K√≥d ellen≈ërz√©se
app.post('/api/verify', async (req, res) => {
  try {
    const { email, code } = req.body;
    
    // M√≥dos√≠tott SELECT parancs
    const users = await pool.query(
      'SELECT * FROM felhasznalok WHERE email = $1 AND kod = $2',
      [email, code]
    );
    
    if (users.rows.length === 0) {
      return res.status(400).json({ success: false, message: 'Hib√°s k√≥d vagy email c√≠m.' });
    }
    
    // Aktiv√°ljuk a felhaszn√°l√≥t
    await pool.query(
      'UPDATE felhasznalok SET aktivalt = true, kod = NULL WHERE email = $1',
      [email]
    );
    
    res.json({ 
      success: true, 
      message: 'Sikeres aktiv√°l√°s! Most m√°r bejelentkezhetsz.' 
    });
  } catch (error) {
    console.error('Hiba a k√≥d ellen≈ërz√©se sor√°n:', error);
    res.status(500).json({ success: false, message: 'Hiba t√∂rt√©nt a k√≥d ellen≈ërz√©se sor√°n.' });
  }
});

// Bejelentkez√©s
app.post('/api/login', async (req, res) => {
  try {
    const { email, password } = req.body;
    
    // M√≥dos√≠tott SELECT parancs
    const users = await pool.query(
      'SELECT * FROM felhasznalok WHERE email = $1', 
      [email]
    );
    
    if (users.rows.length === 0) {
      return res.status(401).json({ success: false, message: 'Hib√°s email c√≠m vagy jelsz√≥.' });
    }
    
    const user = users.rows[0];
    const passwordMatch = await bcrypt.compare(password, user.jelszo);
    
    if (!passwordMatch) {
      return res.status(401).json({ success: false, message: 'Hib√°s email c√≠m vagy jelsz√≥.' });
    }
    
    if (!user.aktivalt) {
      return res.status(403).json({ 
        success: false, 
        message: 'A fi√≥k nincs aktiv√°lva. K√©rlek er≈ës√≠tsd meg az email c√≠med.' 
      });
    }
    
    // Sikeres bejelentkez√©s
    res.json({ 
      success: true, 
      message: 'Sikeres bejelentkez√©s!',
      user: { email: user.email }
    });
  } catch (error) {
    console.error('Hiba a bejelentkez√©s sor√°n:', error);
    res.status(500).json({ success: false, message: 'Hiba t√∂rt√©nt a bejelentkez√©s sor√°n.' });
  }
});

// J√°t√©k logika Socket.io-val
io.on('connection', (socket) => {
  console.log('Egy felhaszn√°l√≥ csatlakozott:', socket.id);

  socket.on('joinGame', (roomId) => {
    socket.join(roomId);

    if (!rooms[roomId]) {
      rooms[roomId] = {
        players: {},
        scores: {},
        rematchVotes: {},
        timers: {},
      };
    }

    const room = rooms[roomId];
    room.players[socket.id] = { choice: null };
    room.scores[socket.id] = 0;

    if (Object.keys(room.players).length === 2) {
      io.to(roomId).emit('startGame');
      startRound(roomId);
    }
  });

  socket.on('result', (data) => {
  clearInterval(countdownInterval);
  document.getElementById('game').style.display = 'none';
  document.getElementById('result').style.display = 'block';
  document.getElementById('actionButtons').style.display = 'none'; // Elrejtj√ºk a gombokat
  
  document.getElementById('resultText').textContent =
    `Te: ${data.yourChoice} | Ellenf√©l: ${data.opponentChoice} ‚Üí ${data.outcome}`;
  document.getElementById('scoreboard').textContent =
    `Pontsz√°m: Te ${data.yourScore} - ${data.opponentScore} Ellenf√©l`;
});

// J√°t√©k v√©ge eset√©n
socket.on('game-over', () => {
  document.getElementById('actionButtons').style.display = 'flex'; // Megjelen√≠tj√ºk a gombokat
  document.getElementById('rematchBtn').disabled = false;
  document.getElementById('status').textContent = 'A j√°t√©k v√©get √©rt.';

  document.getElementById('exitBtn').addEventListener('click', function() {
  if (confirm('Biztosan ki akarsz l√©pni a j√°t√©kb√≥l?')) {
    socket.emit('leave-room', roomId);
    window.location.href = 'menu.html';
  }
});
});

// √öj j√°t√©k ind√≠t√°sakor
socket.on('rematch-start', () => {
  document.getElementById('result').style.display = 'none';
  document.getElementById('game').style.display = 'block';
  document.getElementById('actionButtons').style.display = 'none'; // Elrejtj√ºk a gombokat
  enableButtons();
  startCountdown();
});

  socket.on('choice', ({ roomId, choice }) => {
    const room = rooms[roomId];
    if (!room) return;
    if (room.players[socket.id]) {
      room.players[socket.id].choice = choice;
    }

    checkChoices(roomId);
  });

  socket.on('play-again', (roomId) => {
    const room = rooms[roomId];
    if (!room) return;
    room.rematchVotes[socket.id] = true;

    if (Object.keys(room.rematchVotes).length === 2) {
      // Reset
      for (let pid in room.players) {
        room.players[pid].choice = null;
        room.scores[pid] = 0;
      }
      room.rematchVotes = {};
      io.to(roomId).emit('rematch-start');
      startRound(roomId);
    }
  });

  socket.on('leave-room', (roomId) => {
    leaveRoom(socket, roomId);
  });

  socket.on('disconnect', () => {
    for (const roomId in rooms) {
      if (rooms[roomId].players[socket.id]) {
        leaveRoom(socket, roomId);
      }
    }
  });
});

// Seg√©df√ºggv√©nyek a j√°t√©khoz
function leaveRoom(socket, roomId) {
  const room = rooms[roomId];
  if (!room) return;
  delete room.players[socket.id];
  delete room.scores[socket.id];
  clearTimeout(room.timers[roomId]);
  io.to(roomId).emit('opponent-left');
  if (Object.keys(room.players).length === 0) delete rooms[roomId];
}

function startRound(roomId) {
  const room = rooms[roomId];
  if (!room) return;

  // Reset choice
  for (let pid in room.players) {
    room.players[pid].choice = null;
  }

  io.to(roomId).emit('new-round');

  // 30 m√°sodperc id≈ëz√≠t≈ë
  room.timers[roomId] = setTimeout(() => {
    for (let pid in room.players) {
      if (!room.players[pid].choice) {
        room.players[pid].choice = getRandomChoice();
      }
    }
    checkChoices(roomId);
  }, 30000);
}

function checkChoices(roomId) {
  const room = rooms[roomId];
  if (!room) return;
  const players = Object.entries(room.players);

  if (players.every(([_, p]) => p.choice !== null)) {
    clearTimeout(room.timers[roomId]);

    const [[id1, p1], [id2, p2]] = players;
    const result = getResult(p1.choice, p2.choice);

    if (result === 1) room.scores[id1]++;
    if (result === -1) room.scores[id2]++;

    // Eredm√©ny k√ºld√©se
    io.to(id1).emit('result', {
      yourChoice: p1.choice,
      opponentChoice: p2.choice,
      outcome: getOutcomeText(result),
      yourScore: room.scores[id1],
      opponentScore: room.scores[id2]
    });

    io.to(id2).emit('result', {
      yourChoice: p2.choice,
      opponentChoice: p1.choice,
      outcome: getOutcomeText(-result),
      yourScore: room.scores[id2],
      opponentScore: room.scores[id1]
    });

    // J√°t√©k v√©ge?
    if (room.scores[id1] === 3 || room.scores[id2] === 3) {
      io.to(roomId).emit('game-over');
    } else {
      // √öj k√∂r 5 m√°sodperc m√∫lva
      setTimeout(() => startRound(roomId), 5000);
    }
  }
}

function getResult(choice1, choice2) {
  if (choice1 === choice2) return 0;
  if (
    (choice1 === 'k≈ë' && choice2 === 'oll√≥') ||
    (choice1 === 'pap√≠r' && choice2 === 'k≈ë') ||
    (choice1 === 'oll√≥' && choice2 === 'pap√≠r')
  ) return 1;
  return -1;
}

function getOutcomeText(result) {
  return result === 1 ? 'Nyert√©l!' : result === 0 ? 'D√∂ntetlen!' : 'Vesztett√©l!';
}

function getRandomChoice() {
  const options = ['k≈ë', 'pap√≠r', 'oll√≥'];
  return options[Math.floor(Math.random() * options.length)];
}

// Szerver ind√≠t√°sa
const PORT = process.env.PORT || 3000;
server.listen(PORT, () => {
  console.log(`A szerver fut a http://localhost:${PORT} c√≠men`);
});